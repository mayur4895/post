datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  username      String?   @unique
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  posts         Post[]    @relation("UserPosts")
  comments      Comment[] @relation("UserComments")
  likes         Like[]    @relation("UserLikes")
}

model Post {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  content      String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  authorId     String    @db.ObjectId
  author       User      @relation("UserPosts", fields: [authorId], references: [id])
  comments     Comment[] @relation("PostComments")
  likes        Like[]    @relation("PostLikes")
  likeCount    Int       @default(0)
  likedByMe    Boolean   @default(false)
}

 

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  postId    String   @db.ObjectId
  post      Post     @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
  authorId  String   @db.ObjectId
  author    User     @relation("UserComments", fields: [authorId], references: [id])
}

model Like {
  id     String   @id @default(auto()) @map("_id") @db.ObjectId
  postId String   @db.ObjectId
  post   Post     @relation("PostLikes", fields: [postId], references: [id], onDelete: Cascade)
  userId String   @db.ObjectId
  user   User     @relation("UserLikes", fields: [userId], references: [id])

  @@unique([postId, userId])
}

model VerificationToken {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  email   String?   @unique
  token   String    @unique
  expires DateTime?

  @@unique([email, token])
}

model PasswordResetToken {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  email   String?   @unique
  token   String    @unique
  expires DateTime?

  @@unique([email, token])
}
